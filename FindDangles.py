# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# FindDangles.py
# Created on: 2015-08-20 10:18:49.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: This script deletes identical (overlapping) segments and then finds
#  the tiny porcupine segments and labels them in the IsDngl field as 1.
# Created by: Jean M. Olson, South Fork Research, Inc.
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import gis_tools

Input_Network = arcpy.GetParameterAsText(0)
Max_Lngth = arcpy.GetParameterAsText(1)
Workspace = arcpy.GetParameterAsText(2)
Scratch = arcpy.GetParameterAsText(3)

def main(Input_Network,Max_Lngth,Workspace,Scratch):

    # Set the workspace environments
    arcpy.env.overwriteOutput = True
    arcpy.env.outputZFlag = "Disabled"
    arcpy.env.workspace = Workspace

    # Local variables:

    Dangle_Pts = gis_tools.newGISDataset(scratch, "Dangle_Pts")
    Dangle_Slct_A = gis_tools.newGISDataset(scratch, "Dangle_Slct_A")
    Dangle_Slct_SJ = gis_tools.newGISDataset(scratch, "Dangle_Slct_SJ")
    Dangle_Slct_SJ_Buff = gis_tools.newGISDataset(scratch, "Dangle_Slct_SJ_Buff")
    Dangle_Slct_SJ_Buff_A = gis_tools.newGISDataset(scratch, "Dangle_Slct_SJ_Buff_A")
    Dangle_Slct_B = gis_tools.newGISDataset(scratch, "Dangle_Slct_B")

    # Process: Delete Identical
    arcpy.DeleteIdentical_management(Input_Network, "Shape", "", "0")

    arcpy.AddMessage(str("Identical Features Deleted"))

    # Process: Feature Vertices To Points
    arcpy.FeatureVerticesToPoints_management(Input_Network, Dangle_Pts, "DANGLE")

    # Process: Delete Field
    #arcpy.DeleteField_management(Dangle_Pts, "Permanent_;FDate;Resolution;GNIS_ID;GNIS_Name;LengthKM;ReachCode;FlowDir;WBArea_Per;"\
    #                             "FType;FCode;Shape_Leng;Enabled;IsCon;HydroNotes;IsBraided")

    # Process: Select
    arcpy.Select_analysis(Dangle_Pts, Dangle_Slct_A, "\"DANGLE_LEN\" < " + str(Max_Lngth))

    arcpy.AddMessage(str("Dangle Points Selected"))

    # Process: Join Field (2)
    arcpy.JoinField_management(Input_Network, "FID", Dangle_Slct_A, "ORIG_FID", "ORIG_FID;DANGLE_LEN")

    # Process: Select (3)
    arcpy.Select_analysis(Input_Network, Dangle_Slct_SJ, "\"DANGLE_LEN\" >0")

    arcpy.AddMessage(str("Dangle Segments Selected"))

    # Process: Buffer
    arcpy.Buffer_analysis(Dangle_Slct_SJ, Dangle_Slct_SJ_Buff, "1 Meters", "FULL", "ROUND", "NONE", "")

    ## Process: Delete Field (2)
    #arcpy.DeleteField_management(Dangle_Slct_SJ_Buff, "Permanent_;FDate;Resolution;GNIS_ID;GNIS_Name;LengthKM;ReachCode;"\
    #                             "FlowDir;WBArea_Per;FType;FCode;Shape_Leng;Enabled;IsCon;HydroNotes;IsBraided;BUFF_DIST")

    arcpy.AddMessage(str("Dangle Segments Buffered"))

    # Process: Spatial Join
    arcpy.SpatialJoin_analysis(Dangle_Slct_SJ_Buff, Input_Network, Dangle_Slct_SJ_Buff_A, "JOIN_ONE_TO_ONE", "KEEP_ALL", "#","INTERSECT", "", "")


    ## Process: Delete Field (3)
    #arcpy.DeleteField_management(Dangle_Slct_SJ_Buff_A, "Permanent_;FDate;Resolution;GNIS_ID;GNIS_Name;LengthKM;ReachCode;FlowDir;"\
    #                             "WBArea_Per;FType;FCode;Shape_Leng;Enabled;IsCon;HydroNotes;IsBraided")

    # Process: Select (2)
    arcpy.Select_analysis(Dangle_Slct_SJ_Buff_A, Dangle_Slct_B, "\"Join_Count\" > 2")

    # Process: Add Field
    arcpy.AddField_management(Dangle_Slct_B, "IsDngl", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

    # Process: Calculate Field
    arcpy.CalculateField_management(Dangle_Slct_B, "IsDngl", "1", "PYTHON", "")

    arcpy.AddMessage(str("Added IsDngl Field"))

    # Process: Delete Field (4)
    #arcpy.DeleteField_management(Dangle_Slct_B, "Join_Count;TARGET_FID;DANGLE_LEN")

    # Process: Join Field
    arcpy.JoinField_management(Input_Network, "FID", Dangle_Slct_B, "ORIG_FID", "ORIG_FID;IsDngl")

    # Process: Delete Field (5)
   # arcpy.DeleteField_management(Input_Network, "ORIG_FID;DANGLE_LEN;ORIG_FID_1")

    return
